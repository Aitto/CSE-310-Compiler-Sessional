
 Entering new Scope Table with id# 1

At line no : 1 type_specifier : INT 
int
At line no : 1 declaration_list : ID 
x
At line no : 1 declaration_list : declaration_list COMMA ID 
x,y
At line no : 1 declaration_list : declaration_list COMMA ID 
x,y,z
At line no : 1 var_declaration : type_specifier declaration_list SEMICOLON 
int x,y,z;
At line no : 1 unit : var_declaration 
int x,y,z;
At line no : 1 program : unit 
int x,y,z;
At line no : 1 type_specifier : FLOAT 
float
At line no : 1 declaration_list : ID 
a
At line no : 1 var_declaration : type_specifier declaration_list SEMICOLON 
float a;
At line no : 1 unit : var_declaration 
float a;
At line no : 1 program : program unit 

int x,y,z;
float a;
At line no : 3 type_specifier : VOID 
void
At line no : 3 func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON 
void foo();
At line no : 3 unit : func_declaration 
void foo();
At line no : 3 program : program unit 

int x,y,z;
float a;
void foo();
At line no : 5 type_specifier : INT 
int
At line no : 5 type_specifier : INT 
int
At line no : 5 parameter_list : type_specifier ID 
int a
At line no : 5 type_specifier : INT 
int
At line no : 5 parameter_list : parameter_list COMMA type_specifier ID 
int a,int b
At line no : 5 type_specifier : INT 
int
At line no : 5 parameter_list : parameter_list COMMA type_specifier ID 
int a,int b,int c
At line no : 5 type_specifier : INT 
int
At line no : 5 parameter_list : parameter_list COMMA type_specifier ID 
int a,int b,int c,int d

 Entering new Scope Table with id# 2

At line no : 6 variable : ID 
a
At line no : 6 factor : variable 
a
At line no : 6 unary_expression : factor 
a
At line no : 6 term : unary_expression 
a
At line no : 6 simple_expression : term 
a
At line no : 6 variable : ID 
b
At line no : 6 factor : variable 
b
At line no : 6 unary_expression : factor 
b
At line no : 6 term : unary_expression 
b
At line no : 6 simple_expression : simple_expression ADDOP term 
a+b
At line no : 6 rel_expression : simple_expression 
a+b
At line no : 6 logic_expression : rel_expression 
a+b
At line no : 6 expression : logic_expression 
a+b
At line no : 6 statement : RETURN expression SEMICOLON 
return a+b ;
At line no : 6 statements : statement 
return a+b;
At line no : 7 compound_statement : LCURL statements RCURL 
{
return a+b;}


 Scope Table # 1
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2
 [14]--><int, a>
 [15]--><int, b>
 [16]--><int, c>
 [17]--><int, d>

At line no : 7 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
int var(int a,int b,int c,int d){
return a+b;}

At line no : 7 unit : func_definition 
int var(int a,int b,int c,int d){
return a+b;}

At line no : 7 program : program unit 

int x,y,z;
float a;
void foo();
int var(int a,int b,int c,int d){
return a+b;}

At line no : 9 type_specifier : VOID 
void

 Entering new Scope Table with id# 2

At line no : 10 variable : ID 
x
At line no : 10 factor : CONST_INT 
2
At line no : 10 unary_expression : factor 
2
At line no : 10 term : unary_expression 
2
At line no : 10 simple_expression : term 
2
At line no : 10 rel_expression : simple_expression 
2
At line no : 10 logic_expression : rel_expression 
2
At line no : 10 expression : variable ASSIGNOP logic_expression 
x=2
At line no : 10 expression_statement : expression SEMICOLON 
x=2;
At line no : 10 statement : expression_statement 
x=2;
At line no : 10 statements : statement 
x=2;
At line no : 11 variable : ID 
y
At line no : 11 variable : ID 
x
At line no : 11 factor : variable 
x
At line no : 11 unary_expression : factor 
x
At line no : 11 term : unary_expression 
x
At line no : 11 simple_expression : term 
x
At line no : 11 factor : CONST_INT 
5
At line no : 11 unary_expression : factor 
5
At line no : 11 term : unary_expression 
5
At line no : 11 simple_expression : simple_expression ADDOP term 
x-5
At line no : 11 rel_expression : simple_expression 
x-5
At line no : 11 logic_expression : rel_expression 
x-5
At line no : 11 expression : variable ASSIGNOP logic_expression 
y=x-5
At line no : 11 expression_statement : expression SEMICOLON 
y=x-5;
At line no : 11 statement : expression_statement 
y=x-5;
At line no : 11 statements : statements statement 
x=2;
y=x-5;
At line no : 12 compound_statement : LCURL statements RCURL 
{
x=2;
y=x-5;}


 Scope Table # 1
 [6]--><foo, var>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2

At line no : 12 func_definition : type_specifier ID LPAREN RPAREN compound_statement 
void foo( ){
x=2;
y=x-5;}

At line no : 12 unit : func_definition 
void foo( ){
x=2;
y=x-5;}

At line no : 12 program : program unit 

int x,y,z;
float a;
void foo();
int var(int a,int b,int c,int d){
return a+b;}

void foo( ){
x=2;
y=x-5;}

At line no : 14 type_specifier : INT 
int

 Entering new Scope Table with id# 2

At line no : 16 variable : ID 
a
At line no : 16 factor : variable 
a
At line no : 16 unary_expression : factor 
a
At line no : 16 term : unary_expression 
a
At line no : 16 simple_expression : term 
a
At line no : 16 variable : ID 
b
At line no : 16 factor : variable 
b
At line no : 16 unary_expression : factor 
b
At line no : 16 term : unary_expression 
b
At line no : 16 simple_expression : term 
b
At line no : 16 rel_expression : simple_expression RELOP simple_expression 
a>b
At line no : 16 logic_expression : rel_expression 
a>b
At line no : 16 expression : logic_expression 
a>b

 Entering new Scope Table with id# 3

At line no : 17 expression_statement : SEMICOLON 
;
At line no : 17 statement : expression_statement 
;

At line no : 17 statements : statement 
;

At line no : 18 compound_statement : LCURL statements RCURL 
{
;
}


 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2

 Scope Table # 3

At line no : 18 statement : compound_statement 
{
;
}

At line no : 20 statement : IF LPAREN expression RPAREN statement 0x6669rec LOWER_THEN_ELSE 
if(a>b){
;
}

At line no : 20 statements : statement 
if(a>b){
;
}

At line no : 20 variable : ID 
a
At line no : 20 factor : variable 
a
At line no : 20 unary_expression : factor 
a
At line no : 20 term : unary_expression 
a
At line no : 20 simple_expression : term 
a
At line no : 20 variable : ID 
b
At line no : 20 factor : variable 
b
At line no : 20 unary_expression : factor 
b
At line no : 20 term : unary_expression 
b
At line no : 20 simple_expression : term 
b
At line no : 20 rel_expression : simple_expression RELOP simple_expression 
a>b
At line no : 20 logic_expression : rel_expression 
a>b
At line no : 20 expression : logic_expression 
a>b

 Entering new Scope Table with id# 3

At line no : 22 compound_statement : LCURL RCURL 
{
}

 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2

 Scope Table # 3

At line no : 22 statement : compound_statement 
{
}


 Entering new Scope Table with id# 3

At line no : 24 compound_statement : LCURL RCURL 
{
}

 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2

 Scope Table # 3

At line no : 24 statement : compound_statement 
{
}

At line no : 24 statement : IF LPAREN expression RPAREN statement ELSE statement 
if(a>b){
}
 else {
}

At line no : 24 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

At line no : 26 variable : ID 
i
At line no : 26 factor : CONST_INT 
0
At line no : 26 unary_expression : factor 
0
At line no : 26 term : unary_expression 
0
At line no : 26 simple_expression : term 
0
At line no : 26 rel_expression : simple_expression 
0
At line no : 26 logic_expression : rel_expression 
0
At line no : 26 expression : variable ASSIGNOP logic_expression 
i=0
At line no : 26 expression_statement : expression SEMICOLON 
i=0;
At line no : 26 variable : ID 
a
At line no : 26 factor : variable 
a
At line no : 26 unary_expression : factor 
a
At line no : 26 term : unary_expression 
a
At line no : 26 simple_expression : term 
a
At line no : 26 variable : ID 
b
At line no : 26 factor : variable 
b
At line no : 26 unary_expression : factor 
b
At line no : 26 term : unary_expression 
b
At line no : 26 simple_expression : term 
b
At line no : 26 rel_expression : simple_expression RELOP simple_expression 
a<b
At line no : 26 logic_expression : rel_expression 
a<b
At line no : 26 expression : logic_expression 
a<b
At line no : 26 expression_statement : expression SEMICOLON 
a<b;
At line no : 26 variable : ID 
i
At line no : 26 factor : variable INCOP 
i++
At line no : 26 unary_expression : factor 
i++
At line no : 26 term : unary_expression 
i++
At line no : 26 simple_expression : term 
i++
At line no : 26 rel_expression : simple_expression 
i++
At line no : 26 logic_expression : rel_expression 
i++
At line no : 26 expression : logic_expression 
i++

 Entering new Scope Table with id# 3

At line no : 28 compound_statement : LCURL RCURL 
{
}

 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2

 Scope Table # 3

At line no : 28 statement : compound_statement 
{
}

At line no : 28 statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
for(i=0;a<b;i++){
}

At line no : 28 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

At line no : 30 variable : ID 
b
At line no : 30 factor : variable 
b
At line no : 30 unary_expression : factor 
b
At line no : 30 term : unary_expression 
b
At line no : 30 simple_expression : term 
b
At line no : 30 factor : CONST_INT 
2
At line no : 30 unary_expression : factor 
2
At line no : 30 term : unary_expression 
2
At line no : 30 simple_expression : term 
2
At line no : 30 rel_expression : simple_expression RELOP simple_expression 
b>2
At line no : 30 logic_expression : rel_expression 
b>2
At line no : 30 expression : logic_expression 
b>2

 Entering new Scope Table with id# 3

At line no : 32 compound_statement : LCURL RCURL 
{
}

 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2

 Scope Table # 3

At line no : 32 statement : compound_statement 
{
}

At line no : 32 statement : WHILE LPAREN expression RPAREN statement 
while(b>2){
}

At line no : 32 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

At line no : 34 type_specifier : INT 
int
At line no : 34 declaration_list : ID LTHIRD CONST_INT RTHIRD 
a[2]
At line no : 34 declaration_list : declaration_list COMMA ID 
a[2],c
At line no : 34 declaration_list : declaration_list COMMA ID 
a[2],c,i
At line no : 34 declaration_list : declaration_list COMMA ID 
a[2],c,i,j
At line no : 34 var_declaration : type_specifier declaration_list SEMICOLON 
int a[2],c,i,j;
At line no : 34 statement : var_declaration 
int a[2],c,i,j;
At line no : 34 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
At line no : 34 type_specifier : FLOAT 
float
At line no : 34 declaration_list : ID 
d
At line no : 34 var_declaration : type_specifier declaration_list SEMICOLON 
float d;
At line no : 34 statement : var_declaration 
float d;
At line no : 34 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
At line no : 35 factor : CONST_INT 
0
At line no : 35 unary_expression : factor 
0
At line no : 35 term : unary_expression 
0
At line no : 35 simple_expression : term 
0
At line no : 35 rel_expression : simple_expression 
0
At line no : 35 logic_expression : rel_expression 
0
At line no : 35 expression : logic_expression 
0
At line no : 35 variable : ID LTHIRD expression RTHIRD 
a[0]
At line no : 35 factor : CONST_INT 
1
At line no : 35 unary_expression : factor 
1
At line no : 35 term : unary_expression 
1
At line no : 35 simple_expression : term 
1
At line no : 35 rel_expression : simple_expression 
1
At line no : 35 logic_expression : rel_expression 
1
At line no : 35 expression : variable ASSIGNOP logic_expression 
a[0]=1
At line no : 35 expression_statement : expression SEMICOLON 
a[0]=1;
At line no : 35 statement : expression_statement 
a[0]=1;
At line no : 35 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
At line no : 36 factor : CONST_INT 
1
At line no : 36 unary_expression : factor 
1
At line no : 36 term : unary_expression 
1
At line no : 36 simple_expression : term 
1
At line no : 36 rel_expression : simple_expression 
1
At line no : 36 logic_expression : rel_expression 
1
At line no : 36 expression : logic_expression 
1
At line no : 36 variable : ID LTHIRD expression RTHIRD 
a[1]
At line no : 36 factor : CONST_INT 
5
At line no : 36 unary_expression : factor 
5
At line no : 36 term : unary_expression 
5
At line no : 36 simple_expression : term 
5
At line no : 36 rel_expression : simple_expression 
5
At line no : 36 logic_expression : rel_expression 
5
At line no : 36 expression : variable ASSIGNOP logic_expression 
a[1]=5
At line no : 36 expression_statement : expression SEMICOLON 
a[1]=5;
At line no : 36 statement : expression_statement 
a[1]=5;
At line no : 36 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
At line no : 37 variable : ID 
i
At line no : 37 factor : CONST_INT 
0
At line no : 37 unary_expression : factor 
0
At line no : 37 term : unary_expression 
0
At line no : 37 simple_expression : term 
0
At line no : 37 rel_expression : simple_expression 
0
At line no : 37 logic_expression : rel_expression 
0
At line no : 37 expression : logic_expression 
0
At line no : 37 variable : ID LTHIRD expression RTHIRD 
a[0]
At line no : 37 factor : variable 
a[0]
At line no : 37 unary_expression : factor 
a[0]
At line no : 37 term : unary_expression 
a[0]
At line no : 37 simple_expression : term 
a[0]
At line no : 37 factor : CONST_INT 
1
At line no : 37 unary_expression : factor 
1
At line no : 37 term : unary_expression 
1
At line no : 37 simple_expression : term 
1
At line no : 37 rel_expression : simple_expression 
1
At line no : 37 logic_expression : rel_expression 
1
At line no : 37 expression : logic_expression 
1
At line no : 37 variable : ID LTHIRD expression RTHIRD 
a[1]
At line no : 37 factor : variable 
a[1]
At line no : 37 unary_expression : factor 
a[1]
At line no : 37 term : unary_expression 
a[1]
At line no : 37 simple_expression : simple_expression ADDOP term 
a[0]+a[1]
At line no : 37 rel_expression : simple_expression 
a[0]+a[1]
At line no : 37 logic_expression : rel_expression 
a[0]+a[1]
At line no : 37 expression : variable ASSIGNOP logic_expression 
i=a[0]+a[1]
At line no : 37 expression_statement : expression SEMICOLON 
i=a[0]+a[1];
At line no : 37 statement : expression_statement 
i=a[0]+a[1];
At line no : 37 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
At line no : 38 variable : ID 
j
At line no : 38 factor : CONST_INT 
2
At line no : 38 unary_expression : factor 
2
At line no : 38 term : unary_expression 
2
At line no : 38 factor : CONST_INT 
3
At line no : 38 unary_expression : factor 
3
At line no : 38 term : term MULOP unary_expression 
2*3
At line no : 38 simple_expression : term 
2*3
At line no : 38 factor : CONST_INT 
5
At line no : 38 unary_expression : factor 
5
At line no : 38 term : unary_expression 
5
At line no : 38 factor : CONST_INT 
3
At line no : 38 unary_expression : factor 
3
At line no : 38 term : term MULOP unary_expression 
5%3
At line no : 38 simple_expression : term 
5%3
At line no : 38 factor : CONST_INT 
4
At line no : 38 unary_expression : factor 
4
At line no : 38 term : unary_expression 
4
At line no : 38 simple_expression : term 
4
At line no : 38 rel_expression : simple_expression RELOP simple_expression 
5%3<4
At line no : 38 factor : CONST_INT 
8
At line no : 38 unary_expression : factor 
8
At line no : 38 term : unary_expression 
8
At line no : 38 simple_expression : term 
8
At line no : 38 rel_expression : simple_expression 
8
At line no : 38 logic_expression : rel_expression LOGICOP rel_expression 
5%3<4&&8
At line no : 38 expression : logic_expression 
5%3<4&&8
At line no : 38 factor : LPAREN expression RPAREN 
(5%3<4&&8)
At line no : 38 unary_expression : factor 
(5%3<4&&8)
At line no : 38 term : unary_expression 
(5%3<4&&8)
At line no : 38 simple_expression : simple_expression ADDOP term 
2*3+(5%3<4&&8)
At line no : 38 rel_expression : simple_expression 
2*3+(5%3<4&&8)
At line no : 38 factor : CONST_INT 
2
At line no : 38 unary_expression : factor 
2
At line no : 38 term : unary_expression 
2
At line no : 38 simple_expression : term 
2
At line no : 38 rel_expression : simple_expression 
2
At line no : 38 logic_expression : rel_expression LOGICOP rel_expression 
2*3+(5%3<4&&8)||2
At line no : 38 expression : variable ASSIGNOP logic_expression 
j=2*3+(5%3<4&&8)||2
At line no : 38 expression_statement : expression SEMICOLON 
j=2*3+(5%3<4&&8)||2;
At line no : 38 statement : expression_statement 
j=2*3+(5%3<4&&8)||2;
At line no : 38 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
At line no : 39 variable : ID 
d
At line no : 39 factor : CONST_INT 
1
At line no : 39 unary_expression : factor 
1
At line no : 39 term : unary_expression 
1
At line no : 39 simple_expression : term 
1
At line no : 39 rel_expression : simple_expression 
1
At line no : 39 logic_expression : rel_expression 
1
At line no : 39 arguments : logic_expression
1
At line no : 39 factor : CONST_INT 
2
At line no : 39 unary_expression : factor 
2
At line no : 39 term : unary_expression 
2
At line no : 39 factor : CONST_INT 
3
At line no : 39 unary_expression : factor 
3
At line no : 39 term : term MULOP unary_expression 
2*3
At line no : 39 simple_expression : term 
2*3
At line no : 39 rel_expression : simple_expression 
2*3
At line no : 39 logic_expression : rel_expression 
2*3
At line no : 39 arguments : arguments COMMA logic_expression
1,2*3
At line no : 39 argument_list : arguments
1,2*3
At line no : 39 factor : ID LPAREN argument_list RPAREN 
var(1,2*3)
At line no : 39 unary_expression : factor 
var(1,2*3)
At line no : 39 term : unary_expression 
var(1,2*3)
At line no : 39 simple_expression : term 
var(1,2*3)
At line no : 39 factor : CONST_FLOAT 
3.5
At line no : 39 unary_expression : factor 
3.5
At line no : 39 term : unary_expression 
3.5
At line no : 39 factor : CONST_INT 
2
At line no : 39 unary_expression : factor 
2
At line no : 39 term : term MULOP unary_expression 
3.5*2
At line no : 39 simple_expression : simple_expression ADDOP term 
var(1,2*3)+3.5*2
At line no : 39 rel_expression : simple_expression 
var(1,2*3)+3.5*2
At line no : 39 logic_expression : rel_expression 
var(1,2*3)+3.5*2
At line no : 39 expression : variable ASSIGNOP logic_expression 
d=var(1,2*3)+3.5*2
At line no : 39 expression_statement : expression SEMICOLON 
d=var(1,2*3)+3.5*2;
At line no : 39 statement : expression_statement 
d=var(1,2*3)+3.5*2;
At line no : 39 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
At line no : 40 factor : CONST_INT 
0
At line no : 40 unary_expression : factor 
0
At line no : 40 term : unary_expression 
0
At line no : 40 simple_expression : term 
0
At line no : 40 rel_expression : simple_expression 
0
At line no : 40 logic_expression : rel_expression 
0
At line no : 40 expression : logic_expression 
0
At line no : 40 statement : RETURN expression SEMICOLON 
return 0 ;
At line no : 40 statements : statements statement 
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
At line no : 41 compound_statement : LCURL statements RCURL 
{
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}


 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2
 [16]--><ID, c>
 [17]--><ID, d>
 [18]--><ID, a[]>
 [22]--><ID, i>
 [23]--><ID, j>

At line no : 41 func_definition : type_specifier ID LPAREN RPAREN compound_statement 
int main( ){
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}

At line no : 41 unit : func_definition 
int main( ){
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}

At line no : 41 program : program unit 

int x,y,z;
float a;
void foo();
int var(int a,int b,int c,int d){
return a+b;}

void foo( ){
x=2;
y=x-5;}

int main( ){
if(a>b){
;
}

if(a>b){
}
 else {
}

for(i=0;a<b;i++){
}

while(b>2){
}

int a[2],c,i,j;
float d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}


 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>
 [48]--><foo, main>
