
At line no : 1 type_specifier : INT

int

At line no : 1 declaration_list : ID

x

At line no : 1 declaration_list : declaration_list COMMA ID

x,y

At line no : 1 declaration_list : declaration_list COMMA ID

x,y,z

At line no : 1 var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;

At line no : 1 unit : var_declaration

int x,y,z;

At line no : 1 program : unit

int x,y,z;

At line no : 1 type_specifier : FLOAT

float

At line no : 1 declaration_list : ID

a

At line no : 1 var_declaration : type_specifier declaration_list SEMICOLON

float a;

At line no : 1 unit : var_declaration

float a;

At line no : 1 program : program unit


int x,y,z;
float a;

At line no : 3 type_specifier : VOID

void

At line no : 3 func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON

void foo();

At line no : 3 unit : func_declaration

void foo();

At line no : 3 program : program unit


int x,y,z;
float a;
void foo();

At line no : 5 type_specifier : INT

int

At line no : 5 type_specifier : INT

int

At line no : 5 parameter_list : type_specifier ID

int a

At line no : 5 type_specifier : INT

int

At line no : 5 parameter_list : parameter_list COMMA type_specifier ID

int a,int b

At line no : 5 type_specifier : INT

int

At line no : 5 parameter_list : parameter_list COMMA type_specifier ID

int a,int b,int c

At line no : 5 type_specifier : INT

int

At line no : 5 parameter_list : parameter_list COMMA type_specifier ID

int a,int b,int c,int d

 Creating new Scope Table with id# 2


At line no : 6 type_specifier : INT

int

At line no : 6 declaration_list : ID

a

At line no : 6 var_declaration : type_specifier declaration_list SEMICOLON

int a;

At line no : 6 statement : var_declaration

int a;

At line no : 6 statements : statement

int a;

At line no : 7 variable : ID

a

At line no : 7 factor : CONST_INT

4

At line no : 7 unary_expression : factor

4

At line no : 7 term : unary_expression

4

At line no : 7 simple_expression : term

4

At line no : 7 rel_expression : simple_expression

4

At line no : 7 logic_expression : rel_expression

4

At line no : 7 expression : variable ASSIGNOP logic_expression

a=4

At line no : 7 expression_statement : expression SEMICOLON

a=4;

At line no : 7 statement : expression_statement

a=4;

At line no : 7 statements : statements statement

int a;
a=4;

At line no : 8 variable : ID

a

At line no : 8 factor : variable

a

At line no : 8 unary_expression : factor

a

At line no : 8 term : unary_expression

a

At line no : 8 simple_expression : term

a

At line no : 8 variable : ID

b

At line no : 8 factor : variable

b

At line no : 8 unary_expression : factor

b

At line no : 8 term : unary_expression

b

At line no : 8 simple_expression : simple_expression ADDOP term

a+b

At line no : 8 rel_expression : simple_expression

a+b

At line no : 8 logic_expression : rel_expression

a+b

At line no : 8 expression : logic_expression

a+b

At line no : 8 statement : RETURN expression SEMICOLON

return a+b ;

At line no : 8 statements : statements statement

int a;
a=4;
return a+b;

At line no : 9 compound_statement : LCURL statements RCURL

{
int a;
a=4;
return a+b;}


 Scope Table # 1
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2
 [14]--><int, a>
 [15]--><int, b>
 [16]--><int, c>
 [17]--><int, d>

 Deleting table with Id# 2

At line no : 9 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var(int a,int b,int c,int d){
int a;
a=4;
return a+b;}


At line no : 9 unit : func_definition

int var(int a,int b,int c,int d){
int a;
a=4;
return a+b;}


At line no : 9 program : program unit


int x,y,z;
float a;
void foo();
int var(int a,int b,int c,int d){
int a;
a=4;
return a+b;}


At line no : 11 type_specifier : VOID

void

 Creating new Scope Table with id# 2


At line no : 12 variable : ID

x

At line no : 12 factor : CONST_INT

2

At line no : 12 unary_expression : factor

2

At line no : 12 term : unary_expression

2

At line no : 12 simple_expression : term

2

At line no : 12 rel_expression : simple_expression

2

At line no : 12 logic_expression : rel_expression

2

At line no : 12 expression : variable ASSIGNOP logic_expression

x=2

At line no : 12 expression_statement : expression SEMICOLON

x=2;

At line no : 12 statement : expression_statement

x=2;

At line no : 12 statements : statement

x=2;

At line no : 13 variable : ID

y

At line no : 13 variable : ID

x

At line no : 13 factor : variable

x

At line no : 13 unary_expression : factor

x

At line no : 13 term : unary_expression

x

At line no : 13 simple_expression : term

x

At line no : 13 factor : CONST_INT

5

At line no : 13 unary_expression : factor

5

At line no : 13 term : unary_expression

5

At line no : 13 simple_expression : simple_expression ADDOP term

x-5

At line no : 13 rel_expression : simple_expression

x-5

At line no : 13 logic_expression : rel_expression

x-5

At line no : 13 expression : variable ASSIGNOP logic_expression

y=x-5

At line no : 13 expression_statement : expression SEMICOLON

y=x-5;

At line no : 13 statement : expression_statement

y=x-5;

At line no : 13 statements : statements statement

x=2;
y=x-5;

At line no : 14 variable : ID

b

At line no : 14 factor : CONST_INT

3

At line no : 14 unary_expression : factor

3

At line no : 14 term : unary_expression

3

At line no : 14 simple_expression : term

3

At line no : 14 variable : ID

f

At line no : 14 factor : variable

f

At line no : 14 unary_expression : factor

f

At line no : 14 term : unary_expression

f

At line no : 14 simple_expression : simple_expression ADDOP term

3+f

At line no : 14 rel_expression : simple_expression

3+f

At line no : 14 logic_expression : rel_expression

3+f

At line no : 14 expression : variable ASSIGNOP logic_expression

b=3+f

At line no : 14 expression_statement : expression SEMICOLON

b=3+f;

At line no : 14 statement : expression_statement

b=3+f;

At line no : 14 statements : statements statement

x=2;
y=x-5;
b=3+f;

At line no : 16 variable : ID

x

At line no : 16 factor : CONST_INT

7

At line no : 16 unary_expression : factor

7

At line no : 16 term : unary_expression

7

At line no : 16 simple_expression : term

7

At line no : 16 rel_expression : simple_expression

7

At line no : 16 logic_expression : rel_expression

7

At line no : 16 expression : variable ASSIGNOP logic_expression

x=7

At line no : 16 expression_statement : expression SEMICOLON

x=7;

At line no : 16 statement : expression_statement

x=7;

At line no : 16 statements : statements statement

x=2;
y=x-5;
b=3+f;
x=7;

At line no : 17 compound_statement : LCURL statements RCURL

{
x=2;
y=x-5;
b=3+f;
x=7;}


 Scope Table # 1
 [6]--><foo, var>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2

 Deleting table with Id# 2

At line no : 17 func_definition : type_specifier ID LPAREN RPAREN compound_statement

void foo( ){
x=2;
y=x-5;
b=3+f;
x=7;}


At line no : 17 unit : func_definition

void foo( ){
x=2;
y=x-5;
b=3+f;
x=7;}


At line no : 17 program : program unit


int x,y,z;
float a;
void foo();
int var(int a,int b,int c,int d){
int a;
a=4;
return a+b;}

void foo( ){
x=2;
y=x-5;
b=3+f;
x=7;}


At line no : 19 type_specifier : FLOAT

float

At line no : 19 type_specifier : INT

int

At line no : 19 parameter_list : type_specifier ID

int t

At line no : 19 type_specifier : INT

int

At line no : 19 parameter_list : parameter_list COMMA type_specifier ID

int t,int r

 Creating new Scope Table with id# 2


At line no : 20 factor : CONST_FLOAT

8.0

At line no : 20 unary_expression : factor

8.0

At line no : 20 term : unary_expression

8.0

At line no : 20 simple_expression : term

8.0

At line no : 20 rel_expression : simple_expression

8.0

At line no : 20 logic_expression : rel_expression

8.0

At line no : 20 expression : logic_expression

8.0

At line no : 20 statement : RETURN expression SEMICOLON

return 8.0 ;

At line no : 20 statements : statement

return 8.0;

At line no : 21 compound_statement : LCURL statements RCURL

{
return 8.0;}


 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2
 [31]--><int, r>
 [33]--><int, t>

 Deleting table with Id# 2

At line no : 21 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

float k(int t,int r){
return 8.0;}


At line no : 21 unit : func_definition

float k(int t,int r){
return 8.0;}


At line no : 21 program : program unit


int x,y,z;
float a;
void foo();
int var(int a,int b,int c,int d){
int a;
a=4;
return a+b;}

void foo( ){
x=2;
y=x-5;
b=3+f;
x=7;}

float k(int t,int r){
return 8.0;}


At line no : 23 type_specifier : INT

int

 Creating new Scope Table with id# 2


At line no : 24 type_specifier : INT

int

At line no : 24 declaration_list : ID

foo

At line no : 24 var_declaration : type_specifier declaration_list SEMICOLON

int foo;

At line no : 24 statement : var_declaration

int foo;

At line no : 24 statements : statement

int foo;

At line no : 25 type_specifier : INT

int

At line no : 25 declaration_list : ID LTHIRD CONST_INT RTHIRD

a[2]

At line no : 25 declaration_list : declaration_list COMMA ID

a[2],c

At line no : 25 declaration_list : declaration_list COMMA ID

a[2],c,i

At line no : 25 declaration_list : declaration_list COMMA ID

a[2],c,i,j

At line no : 25 var_declaration : type_specifier declaration_list SEMICOLON

int a[2],c,i,j;

At line no : 25 statement : var_declaration

int a[2],c,i,j;

At line no : 25 statements : statements statement

int foo;
int a[2],c,i,j;

At line no : 25 type_specifier : FLOAT

float

At line no : 25 declaration_list : ID

d

At line no : 25 var_declaration : type_specifier declaration_list SEMICOLON

float d;

At line no : 25 statement : var_declaration

float d;

At line no : 25 statements : statements statement

int foo;
int a[2],c,i,j;
float d;

At line no : 26 factor : CONST_INT

2

At line no : 26 unary_expression : factor

2

At line no : 26 term : unary_expression

2

At line no : 26 simple_expression : term

2

At line no : 26 rel_expression : simple_expression

2

At line no : 26 logic_expression : rel_expression

2

At line no : 26 expression : logic_expression

2

At line no : 26 variable : ID LTHIRD expression RTHIRD

c[2]

At line no : 26 factor : CONST_INT

5

At line no : 26 unary_expression : factor

5

At line no : 26 term : unary_expression

5

At line no : 26 simple_expression : term

5

At line no : 26 rel_expression : simple_expression

5

At line no : 26 logic_expression : rel_expression

5

At line no : 26 expression : variable ASSIGNOP logic_expression

c[2]=5

At line no : 26 expression_statement : expression SEMICOLON

c[2]=5;

At line no : 26 statement : expression_statement

c[2]=5;

At line no : 26 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;

At line no : 26 variable : ID

a

At line no : 26 factor : CONST_INT

3

At line no : 26 unary_expression : factor

3

At line no : 26 term : unary_expression

3

At line no : 26 simple_expression : term

3

At line no : 26 rel_expression : simple_expression

3

At line no : 26 logic_expression : rel_expression

3

At line no : 26 expression : variable ASSIGNOP logic_expression

a=3

At line no : 26 expression_statement : expression SEMICOLON

a=3;

At line no : 26 statement : expression_statement

a=3;

At line no : 26 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;

At line no : 27 variable : ID

c

At line no : 27 factor : CONST_INT

1

At line no : 27 unary_expression : factor

1

At line no : 27 term : unary_expression

1

At line no : 27 simple_expression : term

1

At line no : 27 variable : ID

d

At line no : 27 factor : variable

d

At line no : 27 unary_expression : factor

d

At line no : 27 term : unary_expression

d

At line no : 27 simple_expression : term

d

At line no : 27 rel_expression : simple_expression RELOP simple_expression

1<d

At line no : 27 logic_expression : rel_expression

1<d

At line no : 27 expression : variable ASSIGNOP logic_expression

c=1<d

At line no : 27 expression_statement : expression SEMICOLON

c=1<d;

At line no : 27 statement : expression_statement

c=1<d;

At line no : 27 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;

At line no : 28 variable : ID

c

At line no : 28 variable : ID

a

At line no : 28 factor : variable

a

At line no : 28 unary_expression : factor

a

At line no : 28 term : unary_expression

a

At line no : 28 simple_expression : term

a

At line no : 28 rel_expression : simple_expression

a

At line no : 28 logic_expression : rel_expression

a

At line no : 28 arguments : logic_expression

a

At line no : 28 variable : ID

b

At line no : 28 factor : variable

b

At line no : 28 unary_expression : factor

b

At line no : 28 term : unary_expression

b

At line no : 28 simple_expression : term

b

At line no : 28 rel_expression : simple_expression

b

At line no : 28 logic_expression : rel_expression

b

At line no : 28 arguments : arguments COMMA logic_expression

a,b

At line no : 28 argument_list : arguments

a,b

At line no : 28 factor : ID LPAREN argument_list RPAREN

dog(a,b)

At line no : 28 unary_expression : factor

dog(a,b)

At line no : 28 term : unary_expression

dog(a,b)

At line no : 28 simple_expression : term

dog(a,b)

At line no : 28 rel_expression : simple_expression

dog(a,b)

At line no : 28 logic_expression : rel_expression

dog(a,b)

At line no : 28 expression : variable ASSIGNOP logic_expression

c=dog(a,b)

At line no : 28 expression_statement : expression SEMICOLON

c=dog(a,b);

At line no : 28 statement : expression_statement

c=dog(a,b);

At line no : 28 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);

At line no : 29 variable : ID

d

At line no : 29 variable : ID

x

At line no : 29 factor : variable

x

At line no : 29 unary_expression : factor

x

At line no : 29 term : unary_expression

x

At line no : 29 simple_expression : term

x

At line no : 29 rel_expression : simple_expression

x

At line no : 29 logic_expression : rel_expression

x

At line no : 29 arguments : logic_expression

x

At line no : 29 variable : ID

y

At line no : 29 factor : variable

y

At line no : 29 unary_expression : factor

y

At line no : 29 term : unary_expression

y

At line no : 29 simple_expression : term

y

At line no : 29 rel_expression : simple_expression

y

At line no : 29 logic_expression : rel_expression

y

At line no : 29 arguments : arguments COMMA logic_expression

x,y

At line no : 29 argument_list : arguments

x,y

At line no : 29 factor : ID LPAREN argument_list RPAREN

k(x,y)

At line no : 29 unary_expression : factor

k(x,y)

At line no : 29 term : unary_expression

k(x,y)

At line no : 29 simple_expression : term

k(x,y)

At line no : 29 rel_expression : simple_expression

k(x,y)

At line no : 29 logic_expression : rel_expression

k(x,y)

At line no : 29 expression : variable ASSIGNOP logic_expression

d=k(x,y)

At line no : 29 expression_statement : expression SEMICOLON

d=k(x,y);

At line no : 29 statement : expression_statement

d=k(x,y);

At line no : 29 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);

At line no : 30 variable : ID

c

At line no : 30 variable : ID

x

At line no : 30 factor : variable

x

At line no : 30 unary_expression : factor

x

At line no : 30 term : unary_expression

x

At line no : 30 simple_expression : term

x

At line no : 30 rel_expression : simple_expression

x

At line no : 30 logic_expression : rel_expression

x

At line no : 30 arguments : logic_expression

x

At line no : 30 variable : ID

y

At line no : 30 factor : variable

y

At line no : 30 unary_expression : factor

y

At line no : 30 term : unary_expression

y

At line no : 30 simple_expression : term

y

At line no : 30 rel_expression : simple_expression

y

At line no : 30 logic_expression : rel_expression

y

At line no : 30 arguments : arguments COMMA logic_expression

x,y

At line no : 30 argument_list : arguments

x,y

At line no : 30 factor : ID LPAREN argument_list RPAREN

k(x,y)

At line no : 30 unary_expression : factor

k(x,y)

At line no : 30 term : unary_expression

k(x,y)

At line no : 30 simple_expression : term

k(x,y)

At line no : 30 rel_expression : simple_expression

k(x,y)

At line no : 30 logic_expression : rel_expression

k(x,y)

At line no : 30 expression : variable ASSIGNOP logic_expression

c=k(x,y)

At line no : 30 expression_statement : expression SEMICOLON

c=k(x,y);

At line no : 30 statement : expression_statement

c=k(x,y);

At line no : 30 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);

At line no : 31 variable : ID

c

At line no : 31 factor : ID LPAREN argument_list RPAREN

foo( )

At line no : 31 unary_expression : factor

foo( )

At line no : 31 term : unary_expression

foo( )

At line no : 31 simple_expression : term

foo( )

At line no : 31 rel_expression : simple_expression

foo( )

At line no : 31 logic_expression : rel_expression

foo( )

At line no : 31 expression : variable ASSIGNOP logic_expression

c=foo( )

At line no : 31 expression_statement : expression SEMICOLON

c=foo( );

At line no : 31 statement : expression_statement

c=foo( );

At line no : 31 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );

At line no : 32 factor : CONST_INT

0

At line no : 32 unary_expression : factor

0

At line no : 32 term : unary_expression

0

At line no : 32 simple_expression : term

0

At line no : 32 rel_expression : simple_expression

0

At line no : 32 logic_expression : rel_expression

0

At line no : 32 expression : logic_expression

0

At line no : 32 variable : ID LTHIRD expression RTHIRD

a[0]

At line no : 32 factor : CONST_INT

1

At line no : 32 unary_expression : factor

1

At line no : 32 term : unary_expression

1

At line no : 32 simple_expression : term

1

At line no : 32 rel_expression : simple_expression

1

At line no : 32 logic_expression : rel_expression

1

At line no : 32 expression : variable ASSIGNOP logic_expression

a[0]=1

At line no : 32 expression_statement : expression SEMICOLON

a[0]=1;

At line no : 32 statement : expression_statement

a[0]=1;

At line no : 32 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;

At line no : 33 factor : ID LPAREN argument_list RPAREN

foo( )

At line no : 33 unary_expression : factor

foo( )

At line no : 33 term : unary_expression

foo( )

At line no : 33 simple_expression : term

foo( )

At line no : 33 rel_expression : simple_expression

foo( )

At line no : 33 logic_expression : rel_expression

foo( )

At line no : 33 expression : logic_expression

foo( )

At line no : 33 variable : ID LTHIRD expression RTHIRD

a[foo( )]

At line no : 33 factor : CONST_INT

1

At line no : 33 unary_expression : factor

1

At line no : 33 term : unary_expression

1

At line no : 33 simple_expression : term

1

At line no : 33 rel_expression : simple_expression

1

At line no : 33 logic_expression : rel_expression

1

At line no : 33 expression : variable ASSIGNOP logic_expression

a[foo( )]=1

At line no : 33 expression_statement : expression SEMICOLON

a[foo( )]=1;

At line no : 33 statement : expression_statement

a[foo( )]=1;

At line no : 33 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;

At line no : 34 factor : CONST_INT

1

At line no : 34 unary_expression : factor

1

At line no : 34 term : unary_expression

1

At line no : 34 simple_expression : term

1

At line no : 34 rel_expression : simple_expression

1

At line no : 34 logic_expression : rel_expression

1

At line no : 34 arguments : logic_expression

1

At line no : 34 factor : CONST_INT

2

At line no : 34 unary_expression : factor

2

At line no : 34 term : unary_expression

2

At line no : 34 simple_expression : term

2

At line no : 34 rel_expression : simple_expression

2

At line no : 34 logic_expression : rel_expression

2

At line no : 34 arguments : arguments COMMA logic_expression

1,2

At line no : 34 argument_list : arguments

1,2

At line no : 34 factor : ID LPAREN argument_list RPAREN

k(1,2)

At line no : 34 unary_expression : factor

k(1,2)

At line no : 34 term : unary_expression

k(1,2)

At line no : 34 simple_expression : term

k(1,2)

At line no : 34 rel_expression : simple_expression

k(1,2)

At line no : 34 logic_expression : rel_expression

k(1,2)

At line no : 34 expression : logic_expression

k(1,2)

At line no : 34 variable : ID LTHIRD expression RTHIRD

a[k(1,2)]

At line no : 34 factor : CONST_INT

1

At line no : 34 unary_expression : factor

1

At line no : 34 term : unary_expression

1

At line no : 34 simple_expression : term

1

At line no : 34 rel_expression : simple_expression

1

At line no : 34 logic_expression : rel_expression

1

At line no : 34 expression : variable ASSIGNOP logic_expression

a[k(1,2)]=1

At line no : 34 expression_statement : expression SEMICOLON

a[k(1,2)]=1;

At line no : 34 statement : expression_statement

a[k(1,2)]=1;

At line no : 34 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;

At line no : 35 factor : CONST_INT

1

At line no : 35 unary_expression : factor

1

At line no : 35 term : unary_expression

1

At line no : 35 simple_expression : term

1

At line no : 35 rel_expression : simple_expression

1

At line no : 35 logic_expression : rel_expression

1

At line no : 35 arguments : logic_expression

1

At line no : 35 factor : CONST_INT

2

At line no : 35 unary_expression : factor

2

At line no : 35 term : unary_expression

2

At line no : 35 simple_expression : term

2

At line no : 35 rel_expression : simple_expression

2

At line no : 35 logic_expression : rel_expression

2

At line no : 35 arguments : arguments COMMA logic_expression

1,2

At line no : 35 factor : CONST_INT

3

At line no : 35 unary_expression : factor

3

At line no : 35 term : unary_expression

3

At line no : 35 simple_expression : term

3

At line no : 35 rel_expression : simple_expression

3

At line no : 35 logic_expression : rel_expression

3

At line no : 35 arguments : arguments COMMA logic_expression

1,2,3

At line no : 35 factor : CONST_INT

4

At line no : 35 unary_expression : factor

4

At line no : 35 term : unary_expression

4

At line no : 35 simple_expression : term

4

At line no : 35 rel_expression : simple_expression

4

At line no : 35 logic_expression : rel_expression

4

At line no : 35 arguments : arguments COMMA logic_expression

1,2,3,4

At line no : 35 argument_list : arguments

1,2,3,4

At line no : 35 factor : ID LPAREN argument_list RPAREN

var(1,2,3,4)

At line no : 35 unary_expression : factor

var(1,2,3,4)

At line no : 35 term : unary_expression

var(1,2,3,4)

At line no : 35 simple_expression : term

var(1,2,3,4)

At line no : 35 rel_expression : simple_expression

var(1,2,3,4)

At line no : 35 logic_expression : rel_expression

var(1,2,3,4)

At line no : 35 expression : logic_expression

var(1,2,3,4)

At line no : 35 variable : ID LTHIRD expression RTHIRD

a[var(1,2,3,4)]

At line no : 35 factor : CONST_INT

1

At line no : 35 unary_expression : factor

1

At line no : 35 term : unary_expression

1

At line no : 35 simple_expression : term

1

At line no : 35 rel_expression : simple_expression

1

At line no : 35 logic_expression : rel_expression

1

At line no : 35 expression : variable ASSIGNOP logic_expression

a[var(1,2,3,4)]=1

At line no : 35 expression_statement : expression SEMICOLON

a[var(1,2,3,4)]=1;

At line no : 35 statement : expression_statement

a[var(1,2,3,4)]=1;

At line no : 35 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;

At line no : 36 factor : CONST_INT

1

At line no : 36 unary_expression : factor

1

At line no : 36 term : unary_expression

1

At line no : 36 simple_expression : term

1

At line no : 36 rel_expression : simple_expression

1

At line no : 36 logic_expression : rel_expression

1

At line no : 36 expression : logic_expression

1

At line no : 36 variable : ID LTHIRD expression RTHIRD

a[1]

At line no : 36 factor : CONST_INT

5

At line no : 36 unary_expression : factor

5

At line no : 36 term : unary_expression

5

At line no : 36 simple_expression : term

5

At line no : 36 rel_expression : simple_expression

5

At line no : 36 logic_expression : rel_expression

5

At line no : 36 expression : variable ASSIGNOP logic_expression

a[1]=5

At line no : 36 expression_statement : expression SEMICOLON

a[1]=5;

At line no : 36 statement : expression_statement

a[1]=5;

At line no : 36 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;

At line no : 37 factor : CONST_FLOAT

1.5

At line no : 37 unary_expression : factor

1.5

At line no : 37 term : unary_expression

1.5

At line no : 37 simple_expression : term

1.5

At line no : 37 rel_expression : simple_expression

1.5

At line no : 37 logic_expression : rel_expression

1.5

At line no : 37 expression : logic_expression

1.5

At line no : 37 variable : ID LTHIRD expression RTHIRD

a[1.5]

At line no : 37 factor : CONST_INT

0

At line no : 37 unary_expression : factor

0

At line no : 37 term : unary_expression

0

At line no : 37 simple_expression : term

0

At line no : 37 rel_expression : simple_expression

0

At line no : 37 logic_expression : rel_expression

0

At line no : 37 expression : variable ASSIGNOP logic_expression

a[1.5]=0

At line no : 37 expression_statement : expression SEMICOLON

a[1.5]=0;

At line no : 37 statement : expression_statement

a[1.5]=0;

At line no : 37 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;

At line no : 38 factor : CONST_INT

2

At line no : 38 unary_expression : factor

2

At line no : 38 term : unary_expression

2

At line no : 38 simple_expression : term

2

At line no : 38 rel_expression : simple_expression

2

At line no : 38 logic_expression : rel_expression

2

At line no : 38 expression : logic_expression

2

At line no : 38 variable : ID LTHIRD expression RTHIRD

a[2]

At line no : 38 factor : CONST_INT

3

At line no : 38 unary_expression : factor

3

At line no : 38 term : unary_expression

3

At line no : 38 simple_expression : term

3

At line no : 38 rel_expression : simple_expression

3

At line no : 38 logic_expression : rel_expression

3

At line no : 38 expression : variable ASSIGNOP logic_expression

a[2]=3

At line no : 38 expression_statement : expression SEMICOLON

a[2]=3;

At line no : 38 statement : expression_statement

a[2]=3;

At line no : 38 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;

At line no : 38 factor : CONST_FLOAT

2.5

At line no : 38 unary_expression : factor

2.5

At line no : 38 term : unary_expression

2.5

At line no : 38 simple_expression : term

2.5

At line no : 38 rel_expression : simple_expression

2.5

At line no : 38 logic_expression : rel_expression

2.5

At line no : 38 expression : logic_expression

2.5

At line no : 38 variable : ID LTHIRD expression RTHIRD

a[2.5]

At line no : 38 factor : CONST_FLOAT

3.5

At line no : 38 unary_expression : factor

3.5

At line no : 38 term : unary_expression

3.5

At line no : 38 simple_expression : term

3.5

At line no : 38 rel_expression : simple_expression

3.5

At line no : 38 logic_expression : rel_expression

3.5

At line no : 38 expression : logic_expression

3.5

At line no : 38 variable : ID LTHIRD expression RTHIRD

a[3.5]

At line no : 38 factor : variable

a[3.5]

At line no : 38 unary_expression : factor

a[3.5]

At line no : 38 term : unary_expression

a[3.5]

At line no : 38 simple_expression : term

a[3.5]

At line no : 38 rel_expression : simple_expression

a[3.5]

At line no : 38 logic_expression : rel_expression

a[3.5]

At line no : 38 expression : variable ASSIGNOP logic_expression

a[2.5]=a[3.5]

At line no : 38 expression_statement : expression SEMICOLON

a[2.5]=a[3.5];

At line no : 38 statement : expression_statement

a[2.5]=a[3.5];

At line no : 38 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];

At line no : 39 variable : ID

i

At line no : 39 factor : CONST_INT

0

At line no : 39 unary_expression : factor

0

At line no : 39 term : unary_expression

0

At line no : 39 simple_expression : term

0

At line no : 39 rel_expression : simple_expression

0

At line no : 39 logic_expression : rel_expression

0

At line no : 39 expression : logic_expression

0

At line no : 39 variable : ID LTHIRD expression RTHIRD

a[0]

At line no : 39 factor : variable

a[0]

At line no : 39 unary_expression : factor

a[0]

At line no : 39 term : unary_expression

a[0]

At line no : 39 simple_expression : term

a[0]

At line no : 39 factor : CONST_INT

1

At line no : 39 unary_expression : factor

1

At line no : 39 term : unary_expression

1

At line no : 39 simple_expression : term

1

At line no : 39 rel_expression : simple_expression

1

At line no : 39 logic_expression : rel_expression

1

At line no : 39 expression : logic_expression

1

At line no : 39 variable : ID LTHIRD expression RTHIRD

a[1]

At line no : 39 factor : variable

a[1]

At line no : 39 unary_expression : factor

a[1]

At line no : 39 term : unary_expression

a[1]

At line no : 39 simple_expression : simple_expression ADDOP term

a[0]+a[1]

At line no : 39 rel_expression : simple_expression

a[0]+a[1]

At line no : 39 logic_expression : rel_expression

a[0]+a[1]

At line no : 39 expression : variable ASSIGNOP logic_expression

i=a[0]+a[1]

At line no : 39 expression_statement : expression SEMICOLON

i=a[0]+a[1];

At line no : 39 statement : expression_statement

i=a[0]+a[1];

At line no : 39 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];
i=a[0]+a[1];

At line no : 40 variable : ID

j

At line no : 40 factor : CONST_INT

2

At line no : 40 unary_expression : factor

2

At line no : 40 term : unary_expression

2

At line no : 40 factor : CONST_INT

3

At line no : 40 unary_expression : factor

3

At line no : 40 term : term MULOP unary_expression

2*3

At line no : 40 simple_expression : term

2*3

At line no : 40 factor : CONST_INT

5

At line no : 40 unary_expression : factor

5

At line no : 40 term : unary_expression

5

At line no : 40 factor : CONST_FLOAT

3.5

At line no : 40 unary_expression : factor

3.5

At line no : 40 term : term MULOP unary_expression

5%3.5

At line no : 40 simple_expression : term

5%3.5

At line no : 40 factor : CONST_INT

4

At line no : 40 unary_expression : factor

4

At line no : 40 term : unary_expression

4

At line no : 40 simple_expression : term

4

At line no : 40 rel_expression : simple_expression RELOP simple_expression

5%3.5<4

At line no : 40 factor : CONST_INT

8

At line no : 40 unary_expression : factor

8

At line no : 40 term : unary_expression

8

At line no : 40 simple_expression : term

8

At line no : 40 rel_expression : simple_expression

8

At line no : 40 logic_expression : rel_expression LOGICOP rel_expression

5%3.5<4&&8

At line no : 40 expression : logic_expression

5%3.5<4&&8

At line no : 40 factor : LPAREN expression RPAREN

(5%3.5<4&&8)

At line no : 40 unary_expression : factor

(5%3.5<4&&8)

At line no : 40 term : unary_expression

(5%3.5<4&&8)

At line no : 40 simple_expression : simple_expression ADDOP term

2*3+(5%3.5<4&&8)

At line no : 40 rel_expression : simple_expression

2*3+(5%3.5<4&&8)

At line no : 40 factor : CONST_INT

2

At line no : 40 unary_expression : factor

2

At line no : 40 term : unary_expression

2

At line no : 40 simple_expression : term

2

At line no : 40 rel_expression : simple_expression

2

At line no : 40 logic_expression : rel_expression LOGICOP rel_expression

2*3+(5%3.5<4&&8)||2

At line no : 40 expression : variable ASSIGNOP logic_expression

j=2*3+(5%3.5<4&&8)||2

At line no : 40 expression_statement : expression SEMICOLON

j=2*3+(5%3.5<4&&8)||2;

At line no : 40 statement : expression_statement

j=2*3+(5%3.5<4&&8)||2;

At line no : 40 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];
i=a[0]+a[1];
j=2*3+(5%3.5<4&&8)||2;

At line no : 41 variable : ID

d

At line no : 41 factor : CONST_INT

1

At line no : 41 unary_expression : factor

1

At line no : 41 term : unary_expression

1

At line no : 41 simple_expression : term

1

At line no : 41 rel_expression : simple_expression

1

At line no : 41 logic_expression : rel_expression

1

At line no : 41 arguments : logic_expression

1

At line no : 41 factor : CONST_INT

2

At line no : 41 unary_expression : factor

2

At line no : 41 term : unary_expression

2

At line no : 41 factor : CONST_INT

3

At line no : 41 unary_expression : factor

3

At line no : 41 term : term MULOP unary_expression

2*3

At line no : 41 simple_expression : term

2*3

At line no : 41 rel_expression : simple_expression

2*3

At line no : 41 logic_expression : rel_expression

2*3

At line no : 41 arguments : arguments COMMA logic_expression

1,2*3

At line no : 41 argument_list : arguments

1,2*3

At line no : 41 factor : ID LPAREN argument_list RPAREN

var(1,2*3)

At line no : 41 unary_expression : factor

var(1,2*3)

At line no : 41 term : unary_expression

var(1,2*3)

At line no : 41 simple_expression : term

var(1,2*3)

At line no : 41 factor : CONST_FLOAT

3.5

At line no : 41 unary_expression : factor

3.5

At line no : 41 term : unary_expression

3.5

At line no : 41 factor : CONST_INT

2

At line no : 41 unary_expression : factor

2

At line no : 41 term : term MULOP unary_expression

3.5*2

At line no : 41 simple_expression : simple_expression ADDOP term

var(1,2*3)+3.5*2

At line no : 41 rel_expression : simple_expression

var(1,2*3)+3.5*2

At line no : 41 logic_expression : rel_expression

var(1,2*3)+3.5*2

At line no : 41 expression : variable ASSIGNOP logic_expression

d=var(1,2*3)+3.5*2

At line no : 41 expression_statement : expression SEMICOLON

d=var(1,2*3)+3.5*2;

At line no : 41 statement : expression_statement

d=var(1,2*3)+3.5*2;

At line no : 41 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];
i=a[0]+a[1];
j=2*3+(5%3.5<4&&8)||2;
d=var(1,2*3)+3.5*2;

At line no : 42 factor : CONST_INT

0

At line no : 42 unary_expression : factor

0

At line no : 42 term : unary_expression

0

At line no : 42 simple_expression : term

0

At line no : 42 rel_expression : simple_expression

0

At line no : 42 logic_expression : rel_expression

0

At line no : 42 expression : logic_expression

0

At line no : 42 statement : RETURN expression SEMICOLON

return 0 ;

At line no : 42 statements : statements statement

int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];
i=a[0]+a[1];
j=2*3+(5%3.5<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;

At line no : 43 compound_statement : LCURL statements RCURL

{
int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];
i=a[0]+a[1];
j=2*3+(5%3.5<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}


 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [24]--><foo, k>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>

 Scope Table # 2
 [16]--><ID, c>
 [17]--><ID, d>
 [18]--><ID, a[]>
 [22]--><ID, i>
 [23]--><ID, j>

 Deleting table with Id# 2

At line no : 43 func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main( ){
int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];
i=a[0]+a[1];
j=2*3+(5%3.5<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}


At line no : 43 unit : func_definition

int main( ){
int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];
i=a[0]+a[1];
j=2*3+(5%3.5<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}


At line no : 43 program : program unit


int x,y,z;
float a;
void foo();
int var(int a,int b,int c,int d){
int a;
a=4;
return a+b;}

void foo( ){
x=2;
y=x-5;
b=3+f;
x=7;}

float k(int t,int r){
return 8.0;}

int main( ){
int foo;
int a[2],c,i,j;
float d;
c[2]=5;
a=3;
c=1<d;
c=dog(a,b);
d=k(x,y);
c=k(x,y);
c=foo( );
a[0]=1;
a[foo( )]=1;
a[k(1,2)]=1;
a[var(1,2,3,4)]=1;
a[1]=5;
a[1.5]=0;
a[2]=3;
a[2.5]=a[3.5];
i=a[0]+a[1];
j=2*3+(5%3.5<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}


 Scope Table # 1
 [6]--><foo, var>
 [11]--><foo, foo>
 [14]--><ID, a>
 [24]--><foo, k>
 [37]--><ID, x>
 [38]--><ID, y>
 [39]--><ID, z>
 [48]--><foo, main>

	total lines: 43

