
At line no : 1 type_specifier : INT

int

At line no : 1 declaration_list : ID LTHIRD CONST_INT RTHIRD

x[2]

At line no : 1 var_declaration : type_specifier declaration_list SEMICOLON

int x[2];

At line no : 1 unit : var_declaration

int x[2];

At line no : 1 program : unit

int x[2];

At line no : 2 type_specifier : VOID

void

 Creating new Scope Table with id# 2


At line no : 3 type_specifier : INT

int

At line no : 3 declaration_list : ID

f

At line no : 3 var_declaration : type_specifier declaration_list SEMICOLON

int f;

At line no : 3 statement : var_declaration

int f;

At line no : 3 statements : statement

int f;

At line no : 4 variable : ID

f

At line no : 4 factor : CONST_INT

1

At line no : 4 unary_expression : factor

1

At line no : 4 term : unary_expression

1

At line no : 4 simple_expression : term

1

At line no : 4 rel_expression : simple_expression

1

At line no : 4 logic_expression : rel_expression

1

At line no : 4 expression : logic_expression

1

At line no : 4 variable : ID LTHIRD expression RTHIRD

x[1]

At line no : 4 factor : variable

x[1]

At line no : 4 unary_expression : factor

x[1]

At line no : 4 term : unary_expression

x[1]

At line no : 4 simple_expression : term

x[1]

At line no : 4 rel_expression : simple_expression

x[1]

At line no : 4 logic_expression : rel_expression

x[1]

At line no : 4 expression : variable ASSIGNOP logic_expression

f=x[1]

At line no : 4 expression_statement : expression SEMICOLON

f=x[1];

At line no : 4 statement : expression_statement

f=x[1];

At line no : 4 statements : statements statement

int f;
f=x[1];

At line no : 5 statement : PRINTLN LPAREN ID RPAREN SEMICOLON


At line no : 5 statements : statements statement

int f;
f=x[1];
println

At line no : 6 compound_statement : LCURL statements RCURL

{
int f;
f=x[1];
println}


 Scope Table # 1
 [11]--><foo, foo>
 [37]--><ID, x>

 Scope Table # 2
 [19]--><ID, f>

 Deleting table with Id# 2

At line no : 6 func_definition : type_specifier ID LPAREN RPAREN compound_statement

void foo( ){
int f;
f=x[1];
println}


At line no : 6 unit : func_definition

void foo( ){
int f;
f=x[1];
println}


At line no : 6 program : program unit


int x[2];
void foo( ){
int f;
f=x[1];
println}


At line no : 8 type_specifier : INT

int

 Creating new Scope Table with id# 2


At line no : 10 type_specifier : INT

int

At line no : 10 declaration_list : ID LTHIRD CONST_INT RTHIRD

a[2]

At line no : 10 var_declaration : type_specifier declaration_list SEMICOLON

int a[2];

At line no : 10 statement : var_declaration

int a[2];

At line no : 10 statements : statement

int a[2];

At line no : 11 factor : CONST_INT

1

At line no : 11 unary_expression : factor

1

At line no : 11 term : unary_expression

1

At line no : 11 simple_expression : term

1

At line no : 11 rel_expression : simple_expression

1

At line no : 11 logic_expression : rel_expression

1

At line no : 11 expression : logic_expression

1

At line no : 11 variable : ID LTHIRD expression RTHIRD

a[1]

At line no : 11 factor : CONST_INT

2

At line no : 11 unary_expression : factor

2

At line no : 11 term : unary_expression

2

At line no : 11 simple_expression : term

2

At line no : 11 rel_expression : simple_expression

2

At line no : 11 logic_expression : rel_expression

2

At line no : 11 expression : variable ASSIGNOP logic_expression

a[1]=2

At line no : 11 expression_statement : expression SEMICOLON

a[1]=2;

At line no : 11 statement : expression_statement

a[1]=2;

At line no : 11 statements : statements statement

int a[2];
a[1]=2;

At line no : 12 type_specifier : INT

int

At line no : 12 declaration_list : ID

k

At line no : 12 var_declaration : type_specifier declaration_list SEMICOLON

int k;

At line no : 12 statement : var_declaration

int k;

At line no : 12 statements : statements statement

int a[2];
a[1]=2;
int k;

At line no : 13 variable : ID

k

At line no : 13 factor : CONST_INT

1

At line no : 13 unary_expression : factor

1

At line no : 13 term : unary_expression

1

At line no : 13 simple_expression : term

1

At line no : 13 rel_expression : simple_expression

1

At line no : 13 logic_expression : rel_expression

1

At line no : 13 expression : logic_expression

1

At line no : 13 variable : ID LTHIRD expression RTHIRD

a[1]

At line no : 13 factor : variable

a[1]

At line no : 13 unary_expression : factor

a[1]

At line no : 13 term : unary_expression

a[1]

At line no : 13 simple_expression : term

a[1]

At line no : 13 rel_expression : simple_expression

a[1]

At line no : 13 logic_expression : rel_expression

a[1]

At line no : 13 expression : variable ASSIGNOP logic_expression

k=a[1]

At line no : 13 expression_statement : expression SEMICOLON

k=a[1];

At line no : 13 statement : expression_statement

k=a[1];

At line no : 13 statements : statements statement

int a[2];
a[1]=2;
int k;
k=a[1];

At line no : 14 factor : CONST_INT

1

At line no : 14 unary_expression : factor

1

At line no : 14 term : unary_expression

1

At line no : 14 simple_expression : term

1

At line no : 14 rel_expression : simple_expression

1

At line no : 14 logic_expression : rel_expression

1

At line no : 14 expression : logic_expression

1

At line no : 14 variable : ID LTHIRD expression RTHIRD

x[1]

At line no : 14 factor : CONST_INT

123

At line no : 14 unary_expression : factor

123

At line no : 14 term : unary_expression

123

At line no : 14 simple_expression : term

123

At line no : 14 rel_expression : simple_expression

123

At line no : 14 logic_expression : rel_expression

123

At line no : 14 expression : variable ASSIGNOP logic_expression

x[1]=123

At line no : 14 expression_statement : expression SEMICOLON

x[1]=123;

At line no : 14 statement : expression_statement

x[1]=123;

At line no : 14 statements : statements statement

int a[2];
a[1]=2;
int k;
k=a[1];
x[1]=123;

At line no : 15 factor : ID LPAREN argument_list RPAREN

foo( )

At line no : 15 unary_expression : factor

foo( )

At line no : 15 term : unary_expression

foo( )

At line no : 15 simple_expression : term

foo( )

At line no : 15 rel_expression : simple_expression

foo( )

At line no : 15 logic_expression : rel_expression

foo( )

At line no : 15 expression : logic_expression

foo( )

At line no : 15 expression_statement : expression SEMICOLON

foo( );

At line no : 15 statement : expression_statement

foo( );

At line no : 15 statements : statements statement

int a[2];
a[1]=2;
int k;
k=a[1];
x[1]=123;
foo( );

At line no : 16 statement : PRINTLN LPAREN ID RPAREN SEMICOLON


At line no : 16 statements : statements statement

int a[2];
a[1]=2;
int k;
k=a[1];
x[1]=123;
foo( );
println

At line no : 17 factor : CONST_INT

0

At line no : 17 unary_expression : factor

0

At line no : 17 term : unary_expression

0

At line no : 17 simple_expression : term

0

At line no : 17 rel_expression : simple_expression

0

At line no : 17 logic_expression : rel_expression

0

At line no : 17 expression : logic_expression

0

At line no : 17 statement : RETURN expression SEMICOLON

return return 0; ;

At line no : 17 statements : statements statement

int a[2];
a[1]=2;
int k;
k=a[1];
x[1]=123;
foo( );
println
return 0;

At line no : 18 compound_statement : LCURL statements RCURL

{
int a[2];
a[1]=2;
int k;
k=a[1];
x[1]=123;
foo( );
println
return 0;}


 Scope Table # 1
 [11]--><foo, foo>
 [37]--><ID, x>
 [48]--><foo, main>

 Scope Table # 2
 [14]--><ID, a>
 [24]--><ID, k>

 Deleting table with Id# 2

At line no : 18 func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main( ){
int a[2];
a[1]=2;
int k;
k=a[1];
x[1]=123;
foo( );
println
return 0;}


At line no : 18 unit : func_definition

int main( ){
int a[2];
a[1]=2;
int k;
k=a[1];
x[1]=123;
foo( );
println
return 0;}


At line no : 18 program : program unit


int x[2];
void foo( ){
int f;
f=x[1];
println}

int main( ){
int a[2];
a[1]=2;
int k;
k=a[1];
x[1]=123;
foo( );
println
return 0;}


 Scope Table # 1
 [11]--><foo, foo>
 [37]--><ID, x>
 [48]--><foo, main>

	total lines: 19

